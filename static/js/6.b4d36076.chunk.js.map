{"version":3,"sources":["services/api/api.ts","helpers/datagridCellFormatHelper.ts","components/pages/contests/Contests.tsx","store/actions/ContestActions.ts"],"names":["baseAxios","axios","create","baseURL","api","post","url","data","config","get","formatStringCell","params","cellText","value","formattedText","charAt","toUpperCase","slice","useStyles","makeStyles","theme","textContainer","backgroundColor","padding","textCard","margin","contestTypeColumns","field","headerName","flex","valueFormatter","valueGetter","row","berry_flavor","name","names","length","find","contestName","language","color","renderCell","className","style","getFlavorTextValue","flavor_text_entries","flavorText","flavor_text","contestEffectColumns","width","effect_entries","effect","superContestEffectColumns","Contests","contestTypeData","useSelector","state","contestTypeListWithDataState","contestEffectData","contestEffectListWithDataState","superContestEffectData","superContestEffectListWithDataState","dispatch","useDispatch","useEffect","limit","offset","a","response","responsePromises","results","map","contestTypeResult","console","error","Promise","all","contestTypeDataList","contestTypeList","type","GET_CONTESTTYPELIST_WITH_DATA","getContestTypesWithData","contestEffectResult","contestEffectDataList","contestEffectList","GET_CONTESTEFFECTLIST_WITH_DATA","getContestEffectsWithData","superContestEffectResult","superContestEffectDataList","superContestEffectList","GET_SUPERCONTESTEFFECTLIST_WITH_DATA","getSuperContestEffectsWithData","classes","contestRowsPerPage","superContestRowsPerPage","TextComponent","text","Card","CardContent","Typography","Divider","autoHeight","disableColumnMenu","density","rows","columns","pageSize","rowsPerPageOptions"],"mappings":"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","file":"static/js/6.b4d36076.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseAxios = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2',\n});\n\nconst api = (() => {\n  const post = (url: string, data: any, config: any) =>\n    baseAxios.post(url, data, config);\n  const get = (url: string, config?: any) => baseAxios.get(url, config);\n\n  return { post, get };\n})();\n\nexport default api;\n","import { ValueGetterParams } from '@material-ui/data-grid';\n\nexport const formatStringCell = (params: ValueGetterParams): String => {\n  const cellText = params.value as string;\n  let formattedText = '';\n  if (!cellText || typeof cellText !== 'string') {\n    return formattedText;\n  }\n  formattedText = cellText.charAt(0).toUpperCase() + cellText.slice(1);\n  return formattedText;\n};\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, CardContent, Divider, Typography } from '@material-ui/core';\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridCellParams,\r\n  ValueGetterParams,\r\n} from '@material-ui/data-grid';\r\nimport { find } from 'lodash';\r\n\r\nimport {\r\n  getContestTypesWithData,\r\n  getContestEffectsWithData,\r\n  getSuperContestEffectsWithData,\r\n} from '../../../store/actions/ContestActions';\r\nimport { IAppState } from '../../../store/store';\r\nimport { formatStringCell } from '../../../helpers/datagridCellFormatHelper';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './Contests.scss';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    textContainer: {\r\n      backgroundColor: '#F5F5F5',\r\n      padding: 10,\r\n    },\r\n    textCard: {\r\n      margin: 10,\r\n    },\r\n  };\r\n});\r\n\r\nconst getBerryFlavorValue = (params: ValueGetterParams): String => {\r\n  return params.row.berry_flavor?.name ?? 'No Data';\r\n};\r\nconst getColorValue = (params: ValueGetterParams): String => {\r\n  if (!params.row.names || !params.row.names.length) {\r\n    return 'No Data';\r\n  }\r\n  const englishName = find(params.row.names, (contestName) => {\r\n    return contestName.language.name === 'en';\r\n  });\r\n  return englishName.color || 'No Data';\r\n};\r\nconst contestTypeColumns: GridColDef[] = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    valueFormatter: formatStringCell,\r\n  },\r\n  {\r\n    field: 'berry_flavor',\r\n    headerName: 'Associated Berry Flavor',\r\n    flex: 1,\r\n    valueGetter: getBerryFlavorValue,\r\n    valueFormatter: formatStringCell,\r\n  },\r\n  {\r\n    field: 'color',\r\n    headerName: 'Associated Color',\r\n    flex: 1,\r\n    valueGetter: getColorValue,\r\n    valueFormatter: formatStringCell,\r\n    renderCell: (params: GridCellParams) => {\r\n      return (\r\n        <div className=\"contest-color-cell\">\r\n          <div\r\n            className=\"square\"\r\n            style={{ backgroundColor: params.value as string }}\r\n          />\r\n          <strong>{params.value as string}</strong>\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nconst getEffectValue = (params: ValueGetterParams): String => {\r\n  if (!params.row.effect_entries || !params.row.effect_entries.length) {\r\n    return 'No Data';\r\n  }\r\n  const englishEffect = find(params.row.effect_entries, (effect) => {\r\n    return effect.language.name === 'en';\r\n  });\r\n  return englishEffect.effect || 'No Data';\r\n};\r\nconst getFlavorTextValue = (params: ValueGetterParams): String => {\r\n  if (\r\n    !params.row.flavor_text_entries ||\r\n    !params.row.flavor_text_entries.length\r\n  ) {\r\n    return 'No Data';\r\n  }\r\n  const englishFlavorText = find(\r\n    params.row.flavor_text_entries,\r\n    (flavorText) => {\r\n      return flavorText.language.name === 'en' || 'No Data';\r\n    }\r\n  );\r\n  return englishFlavorText.flavor_text;\r\n};\r\nconst contestEffectColumns: GridColDef[] = [\r\n  {\r\n    field: 'effect',\r\n    headerName: 'Effect',\r\n    width: 500,\r\n    flex: 1,\r\n    valueGetter: getEffectValue,\r\n  },\r\n  { field: 'appeal', headerName: 'Appeal (user hearts gained)' },\r\n  { field: 'jam', headerName: 'Jam (opponent hearts lost)' },\r\n  {\r\n    field: 'flavor_text',\r\n    headerName: 'Flavor Text',\r\n    flex: 1,\r\n    valueGetter: getFlavorTextValue,\r\n  },\r\n];\r\n\r\nconst superContestEffectColumns: GridColDef[] = [\r\n  { field: 'moves', headerName: 'Moves' },\r\n  {\r\n    field: 'appeal',\r\n    headerName: 'Appeal (user hearts gained)',\r\n  },\r\n  {\r\n    field: 'flavor_text',\r\n    headerName: 'Flavor Text',\r\n    flex: 1,\r\n    valueGetter: getFlavorTextValue,\r\n  },\r\n];\r\n\r\nconst Contests: React.FunctionComponent<{}> = () => {\r\n  const contestTypeData = useSelector(\r\n    (state: IAppState) => state.contestTypeListWithDataState\r\n  );\r\n  const contestEffectData = useSelector(\r\n    (state: IAppState) => state.contestEffectListWithDataState\r\n  );\r\n  const superContestEffectData = useSelector(\r\n    (state: IAppState) => state.superContestEffectListWithDataState\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getContestTypesWithData());\r\n    dispatch(getContestEffectsWithData());\r\n    dispatch(getSuperContestEffectsWithData());\r\n  }, [dispatch]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const contestRowsPerPage: number[] = [\r\n    5,\r\n    20,\r\n    contestEffectData.contestEffectList?.length || 100,\r\n  ];\r\n  const superContestRowsPerPage: number[] = [\r\n    5,\r\n    10,\r\n    superContestEffectData.superContestEffectList?.length || 100,\r\n  ];\r\n  const contestInfoText = `Pokémon Contests are a type of \r\n    competition often contrasted with Pokémon battles and \r\n    held in Contest Halls. Pokémon are judged on their condition \r\n    and moves in two rounds, to determine which one is the \r\n    best of its category.`;\r\n  const contestTypeInfoText = `A Pokémon's condition is made up \r\n    of stats that exist for use in Pokémon Contests, Super Contests, \r\n    and Contest Spectaculars. There are five different condition \r\n    stats: Coolness, Beauty, Cuteness, Cleverness, and Toughness.`;\r\n  const contestEffectInfoText = `Every move that a Pokémon can \r\n    learn is associated with one of the five conditions, and the \r\n    audience reaction to a move's condition influences the excitement \r\n    in the hall`;\r\n  const superContestEffectInfoText = ``;\r\n  const TextComponent = (text: string) => {\r\n    return (\r\n      <div className={classes.textContainer}>\r\n        <Card className={classes.textCard}>\r\n          <CardContent>\r\n            <Typography>{text}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"contest-container\">\r\n      {TextComponent(contestInfoText)}\r\n      <Divider />\r\n      {TextComponent(contestTypeInfoText)}\r\n      <div className=\"datagrid-container\">\r\n        <DataGrid\r\n          autoHeight\r\n          disableColumnMenu\r\n          density=\"compact\"\r\n          rows={contestTypeData.contestTypeList}\r\n          columns={contestTypeColumns}\r\n          pageSize={5}\r\n        />\r\n      </div>\r\n      {TextComponent(contestEffectInfoText)}\r\n      <div className=\"datagrid-container\">\r\n        <DataGrid\r\n          autoHeight\r\n          disableColumnMenu\r\n          rows={contestEffectData.contestEffectList}\r\n          columns={contestEffectColumns}\r\n          rowsPerPageOptions={contestRowsPerPage}\r\n          pageSize={5}\r\n        />\r\n      </div>\r\n      {TextComponent(superContestEffectInfoText)}\r\n      <div className=\"datagrid-container\">\r\n        <DataGrid\r\n          autoHeight\r\n          disableColumnMenu\r\n          rows={superContestEffectData.superContestEffectList}\r\n          columns={superContestEffectColumns}\r\n          rowsPerPageOptions={superContestRowsPerPage}\r\n          pageSize={5}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contests;\r\n","import {\n  GET_CONTESTTYPELIST,\n  GET_CONTESTTYPELIST_WITH_DATA,\n  GET_CONTESTTYPE,\n  GET_CONTESTEFFECTLIST,\n  GET_CONTESTEFFECTLIST_WITH_DATA,\n  GET_CONTESTEFFECT,\n  GET_SUPERCONTESTEFFECTLIST,\n  GET_SUPERCONTESTEFFECTLIST_WITH_DATA,\n  GET_SUPERCONTESTEFFECT,\n} from './actionTypes';\nimport { ActionCreator, Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport {\n  IContestTypeListState,\n  IContestTypeListWithDataState,\n  IContestTypeState,\n  IContestEffectListState,\n  IContestEffectListWithDataState,\n  IContestEffectState,\n  ISuperContestEffectListState,\n  ISuperContestEffectListWithDataState,\n  ISuperContestEffectState,\n} from '../reducers/ContestReducers';\n\nimport api from '../../services/api/api';\n\nexport interface IContestTypeListGetAction {\n  type: typeof GET_CONTESTTYPELIST;\n  contestTypeList: IResourceList;\n}\n\nexport interface IContestTypeListWithDataGetAction {\n  type: typeof GET_CONTESTTYPELIST_WITH_DATA;\n  contestTypeList: IContestType[];\n}\n\nexport interface IContestTypeGetAction {\n  type: typeof GET_CONTESTTYPE;\n  contestType: IContestType;\n}\n\nexport interface IContestEffectListGetAction {\n  type: typeof GET_CONTESTEFFECTLIST;\n  contestEffectList: IResourceList;\n}\n\nexport interface IContestEffectListWithDataGetAction {\n  type: typeof GET_CONTESTEFFECTLIST_WITH_DATA;\n  contestEffectList: IContestEffect[];\n}\n\nexport interface IContestEffectGetAction {\n  type: typeof GET_CONTESTEFFECT;\n  contestEffect: IContestEffect;\n}\n\nexport interface ISuperContestEffectListGetAction {\n  type: typeof GET_SUPERCONTESTEFFECTLIST;\n  superContestEffectList: IResourceList;\n}\n\nexport interface ISuperContestEffectListWithDataGetAction {\n  type: typeof GET_SUPERCONTESTEFFECTLIST_WITH_DATA;\n  superContestEffectList: ISuperContestEffect[];\n}\n\nexport interface ISuperContestEffectGetAction {\n  type: typeof GET_SUPERCONTESTEFFECT;\n  superContestEffect: ISuperContestEffect;\n}\n\n/* Contest Type Actions */\nexport const getContestTypes: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    IContestTypeListState,\n    null,\n    IContestTypeListGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/contest-type/?limit=${limit}&offset=${offset}`\n      );\n      dispatch({\n        contestTypeList: response.data,\n        type: GET_CONTESTTYPELIST,\n      });\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getContestTypesWithData: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    IContestTypeListWithDataState,\n    null,\n    IContestTypeListWithDataGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/contest-type/?limit=${limit}&offset=${offset}`\n      );\n      const responsePromises = response.data.results.map(\n        async (contestTypeResult: IAPIResource) => {\n          try {\n            let contestTypeData = await api.get(contestTypeResult.url);\n            return contestTypeData.data;\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      );\n      const contestTypeDataList = await Promise.all(responsePromises);\n      dispatch({\n        contestTypeList: contestTypeDataList,\n        type: GET_CONTESTTYPELIST_WITH_DATA,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getContestTypeByIdOrName: ActionCreator<\n  ThunkAction<Promise<any>, IContestTypeState, null, IContestTypeGetAction>\n> = (idOrName) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(`/contest-type/${idOrName}`);\n      dispatch({\n        resource: response.data,\n        type: GET_CONTESTTYPE,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\n/* Contest Effect Actions */\nexport const getContestEffects: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    IContestEffectListState,\n    null,\n    IContestEffectListGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/contest-effect/?limit=${limit}&offset=${offset}`\n      );\n      dispatch({\n        contestEffectList: response.data,\n        type: GET_CONTESTEFFECTLIST,\n      });\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getContestEffectsWithData: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    IContestEffectListWithDataState,\n    null,\n    IContestEffectListWithDataGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/contest-effect/?limit=${limit}&offset=${offset}`\n      );\n      const responsePromises = response.data.results.map(\n        async (contestEffectResult: IAPIResource) => {\n          try {\n            let contestEffectData = await api.get(contestEffectResult.url);\n            return contestEffectData.data;\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      );\n      const contestEffectDataList = await Promise.all(responsePromises);\n      dispatch({\n        contestEffectList: contestEffectDataList,\n        type: GET_CONTESTEFFECTLIST_WITH_DATA,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getContestEffectByIdOrName: ActionCreator<\n  ThunkAction<Promise<any>, IContestEffectState, null, IContestEffectGetAction>\n> = (idOrName) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(`/contest-effect/${idOrName}`);\n      dispatch({\n        resource: response.data,\n        type: GET_CONTESTEFFECT,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\n/* Super Contest Effect Actions */\nexport const getSuperContestEffects: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    ISuperContestEffectListState,\n    null,\n    ISuperContestEffectListGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/super-contest-effect/?limit=${limit}&offset=${offset}`\n      );\n      dispatch({\n        superContestEffectList: response.data,\n        type: GET_SUPERCONTESTEFFECTLIST,\n      });\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getSuperContestEffectsWithData: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    ISuperContestEffectListWithDataState,\n    null,\n    ISuperContestEffectListWithDataGetAction\n  >\n> = (limit = '100', offset = '') => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(\n        `/super-contest-effect/?limit=${limit}&offset=${offset}`\n      );\n      const responsePromises = response.data.results.map(\n        async (superContestEffectResult: IAPIResource) => {\n          try {\n            let superContestEffectData = await api.get(\n              superContestEffectResult.url\n            );\n            return superContestEffectData.data;\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      );\n      const superContestEffectDataList = await Promise.all(responsePromises);\n      dispatch({\n        superContestEffectList: superContestEffectDataList,\n        type: GET_SUPERCONTESTEFFECTLIST_WITH_DATA,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport const getSuperContestEffectByIdOrName: ActionCreator<\n  ThunkAction<\n    Promise<any>,\n    ISuperContestEffectState,\n    null,\n    ISuperContestEffectGetAction\n  >\n> = (idOrName) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      const response = await api.get(`/super-contest-effect/${idOrName}`);\n      dispatch({\n        resource: response.data,\n        type: GET_SUPERCONTESTEFFECT,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n"],"sourceRoot":""}