{"version":3,"sources":["services/api/api.ts","helpers/datagridCellFormatHelper.ts","components/pages/berries/Berries.tsx","store/actions/BerryActions.ts"],"names":["baseAxios","axios","create","baseURL","api","post","url","data","config","get","formatStringCell","params","cellText","value","formattedText","charAt","toUpperCase","slice","useStyles","makeStyles","theme","textContainer","backgroundColor","padding","textCard","margin","berryColumns","field","headerName","valueFormatter","valueGetter","row","firmness","name","width","flavors","length","map","flavorObj","flavor","potency","join","natural_gift_type","Berries","berryData","useSelector","state","berryListWithDataState","dispatch","useDispatch","useEffect","limit","offset","a","response","responsePromises","results","berryResult","console","error","Promise","all","berryDataList","berryList","type","GET_BERRYLIST_WITH_DATA","getBerriesWithData","classes","rowsPerPage","className","Card","CardContent","Typography","disableColumnMenu","components","Toolbar","GridToolbar","rows","columns","rowsPerPageOptions","pageSize"],"mappings":"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","file":"static/js/5.fe9a86e2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseAxios = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2',\n});\n\nconst api = (() => {\n  const post = (url: string, data: any, config: any) =>\n    baseAxios.post(url, data, config);\n  const get = (url: string, config?: any) => baseAxios.get(url, config);\n\n  return { post, get };\n})();\n\nexport default api;\n","import { ValueGetterParams } from '@material-ui/data-grid';\n\nexport const formatStringCell = (params: ValueGetterParams): String => {\n  const cellText = params.value as string;\n  let formattedText = '';\n  if (!cellText || typeof cellText !== 'string') {\n    return formattedText;\n  }\n  formattedText = cellText.charAt(0).toUpperCase() + cellText.slice(1);\n  return formattedText;\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport {\n  DataGrid,\n  GridToolbar,\n  GridColDef,\n  ValueGetterParams,\n} from '@material-ui/data-grid';\n\nimport { getBerriesWithData } from '../../../store/actions/BerryActions';\nimport { IAppState } from '../../../store/store';\nimport { formatStringCell } from '../../../helpers/datagridCellFormatHelper';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Berries.scss';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    textContainer: {\n      backgroundColor: '#F5F5F5',\n      padding: 10,\n    },\n    textCard: {\n      margin: 10,\n    },\n  };\n});\n\nconst getFirmnessValue = (params: ValueGetterParams): String => {\n  return params.row.firmness?.name ?? 'No Data';\n};\nconst getFlavorsValue = (params: ValueGetterParams): String => {\n  let flavorArray: String[] = [];\n  if (!params.row.flavors || !params.row.flavors.length) {\n    return 'No Data';\n  }\n  flavorArray = params.row.flavors.map(\n    (flavorObj: { flavor: { name: String; url: String }; potency: Number }) => {\n      if (flavorObj.flavor?.name) {\n        return `${flavorObj.flavor.name}: ${flavorObj.potency}`;\n      }\n      return '';\n    }\n  );\n  return flavorArray.join(', ');\n};\nconst getGiftTypeValue = (params: ValueGetterParams): String => {\n  return params.row.natural_gift_type?.name ?? 'No Data';\n};\nconst berryColumns: GridColDef[] = [\n  {\n    field: 'name',\n    headerName: 'Name',\n    // flex: 0.6,\n    valueFormatter: formatStringCell,\n  },\n  {\n    field: 'firmness',\n    headerName: 'Firmness',\n    // flex: 1,\n    valueGetter: getFirmnessValue,\n    valueFormatter: formatStringCell,\n  },\n  {\n    field: 'flavors',\n    headerName: 'Flavors (by potency)',\n    width: 325,\n    valueGetter: getFlavorsValue,\n  },\n  {\n    field: 'growth_time',\n    headerName: 'Growth Time (hours)',\n    width: 145,\n    // flex: 0.5,\n  },\n  {\n    field: 'max_harvest',\n    headerName: 'Max Harvest (per tree)',\n    width: 160,\n    // flex: 0.5\n  },\n  {\n    field: 'natural_gift_power',\n    headerName: 'Natural Gift Power',\n    width: 150,\n    // flex: 0.5\n  },\n  {\n    field: 'natural_gift_type',\n    headerName: 'Natural Gift Type',\n    width: 150,\n    // flex: 1,\n    valueGetter: getGiftTypeValue,\n    valueFormatter: formatStringCell,\n  },\n  {\n    field: 'size',\n    headerName: 'Size (mm)',\n    // flex: 0.5\n  },\n  {\n    field: 'smoothness',\n    headerName: 'Smoothness',\n    // flex: 0.5\n  },\n  {\n    field: 'soil_dryness',\n    headerName: 'Soil Dryness',\n    // flex: 0.5\n  },\n];\n\nconst Berries: React.FunctionComponent<{}> = () => {\n  const berryData = useSelector(\n    (state: IAppState) => state.berryListWithDataState\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBerriesWithData());\n  }, [dispatch]);\n\n  const classes = useStyles();\n  const rowsPerPage: number[] = [10, 25, berryData.berryList?.length || 100];\n  const berryInfoText = `Berries are small, juicy, fleshy fruit. \n    As in the real world, a large variety exists in the Pok√©mon world, \n    with a large range of flavors, names, and effects. \n    First found in the Generation II games, many Berries have since \n    become critical held items in battle, where their various effects \n    include HP and status condition restoration, stat enhancement, \n    and even damage negation.`;\n\n  return (\n    <div className=\"berry-container\">\n      <div className={classes.textContainer}>\n        <Card className={classes.textCard}>\n          <CardContent>\n            <Typography>{berryInfoText}</Typography>\n          </CardContent>\n        </Card>\n      </div>\n      <div className=\"berry-datagrid-container\">\n        <DataGrid\n          disableColumnMenu\n          components={{ Toolbar: GridToolbar }}\n          rows={berryData.berryList}\n          columns={berryColumns}\n          rowsPerPageOptions={rowsPerPage}\n          pageSize={rowsPerPage[0]}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Berries;\n","import {\r\n  GET_BERRYLIST,\r\n  GET_BERRYLIST_WITH_DATA,\r\n  GET_BERRY,\r\n} from './actionTypes';\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport {\r\n  IBerryListState,\r\n  IBerryListWithDataState,\r\n  IBerryState,\r\n} from '../reducers/BerryReducers';\r\n\r\nimport api from '../../services/api/api';\r\n\r\nexport interface IBerryListGetAction {\r\n  type: typeof GET_BERRYLIST;\r\n  berryList: IResourceList;\r\n}\r\n\r\nexport interface IBerryListWithDataGetAction {\r\n  type: typeof GET_BERRYLIST_WITH_DATA;\r\n  berryList: IBerry[];\r\n}\r\n\r\nexport interface IBerryGetAction {\r\n  type: typeof GET_BERRY;\r\n  berry: IBerry;\r\n}\r\n\r\nexport const getBerries: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryListState, null, IBerryListGetAction>\r\n> = (limit = '100', offset = '') => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/?limit=${limit}&offset=${offset}`);\r\n      dispatch({\r\n        berryList: response.data,\r\n        type: GET_BERRYLIST,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getBerriesWithData: ActionCreator<\r\n  ThunkAction<\r\n    Promise<any>,\r\n    IBerryListWithDataState,\r\n    null,\r\n    IBerryListWithDataGetAction\r\n  >\r\n> = (limit = '100', offset = '') => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/?limit=${limit}&offset=${offset}`);\r\n      const responsePromises = response.data.results.map(\r\n        async (berryResult: IAPIResource) => {\r\n          try {\r\n            let berryData = await api.get(berryResult.url);\r\n            return berryData.data;\r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n        }\r\n      );\r\n      const berryDataList = await Promise.all(responsePromises);\r\n      dispatch({\r\n        berryList: berryDataList,\r\n        type: GET_BERRYLIST_WITH_DATA,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getBerryByIdOrName: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryState, null, IBerryGetAction>\r\n> = (idOrName) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/${idOrName}`);\r\n      dispatch({\r\n        resource: response.data,\r\n        type: GET_BERRY,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n"],"sourceRoot":""}