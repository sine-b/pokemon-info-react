{"version":3,"sources":["services/api/api.ts","components/pages/berries/Berries.tsx","store/actions/BerryActions.ts"],"names":["baseAxios","axios","create","baseURL","api","post","url","data","config","get","Title","Typography","Paragraph","Text","Berries","berryData","useSelector","state","berryListState","dispatch","useDispatch","useEffect","limit","offset","a","response","berryList","type","GET_BERRYLIST","console","error","getBerries","className","columns","title","dataIndex","key","dataSource","results","scroll","y"],"mappings":"mPAEMA,E,OAAYC,EAAMC,OAAO,CAC7BC,QAAS,8BAWIC,EAHN,CAAEC,KAJI,SAACC,EAAaC,EAAWC,GAAzB,OACXR,EAAUK,KAAKC,EAAKC,EAAMC,IAGbC,IAFH,SAACH,EAAaE,GAAd,OAA+BR,EAAUS,IAAIH,EAAKE,KCAxDE,G,OAA2BC,IAA3BD,OAA2BC,IAApBC,UAAoBD,IAATE,KAsCXC,UApC8B,WAC3C,IAAMC,EAAYC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,kBACpDC,EAAWC,cAEjBC,qBAAU,WACRF,ECGA,WAA8B,IAA7BG,EAA4B,uDAApB,GAAIC,EAAgB,uDAAP,GACxB,8CAAO,WAAOJ,GAAP,eAAAK,EAAA,+EAEoBpB,EAAIK,IAAJ,wBAAyBa,EAAzB,mBAAyCC,IAF7D,cAEGE,EAFH,OAGHN,EAAS,CACPO,UAAWD,EAASlB,KACpBoB,KAAMC,MALL,kBAOIH,GAPJ,gCASHI,QAAQC,MAAR,MATG,yDAAP,sDDJWC,CAAW,UAgBtB,OACE,sBAAKC,UAAU,gDAAf,UACE,cAACtB,EAAD,sBACA,qBAAKsB,UAAU,kBAAf,SACE,cAAC,IAAD,CACEA,UAAU,cACVC,QAnBQ,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,MACPC,UAAW,MACXC,IAAK,QAWDC,WAAYtB,EAAUW,UAAUY,QAChCC,OAAQ,CAAEC,EAAG","file":"static/js/6.5ffae65e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseAxios = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2',\n});\n\nconst api = (() => {\n  const post = (url: string, data: any, config: any) =>\n    baseAxios.post(url, data, config);\n  const get = (url: string, config?: any) => baseAxios.get(url, config);\n\n  return { post, get };\n})();\n\nexport default api;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Table, Typography } from 'antd';\r\n\r\nimport { getBerries } from '../../../store/actions/BerryActions';\r\nimport { IAppState } from '../../../store/store';\r\n\r\nimport './Berries.css';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\n\r\nconst Berries: React.FunctionComponent<{}> = () => {\r\n  const berryData = useSelector((state: IAppState) => state.berryListState);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getBerries('70'));\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'URL',\r\n      dataIndex: 'url',\r\n      key: 'url',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"layout-content-page-container berry-container\">\r\n      <Title>Berries</Title>\r\n      <div className=\"table-container\">\r\n        <Table\r\n          className=\"berry-table\"\r\n          columns={columns}\r\n          dataSource={berryData.berryList.results}\r\n          scroll={{ y: 'calc(100vh - 15em)' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Berries;\r\n","import { GET_BERRYLIST, GET_BERRY } from './actionTypes';\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { IBerryListState, IBerryState } from '../reducers/BerryReducers';\r\n\r\nimport api from '../../services/api/api';\r\n\r\nexport interface IBerryListGetAction {\r\n  type: typeof GET_BERRYLIST;\r\n  berryList: IResourceList;\r\n}\r\n\r\nexport interface IBerryGetAction {\r\n  type: typeof GET_BERRY;\r\n  berry: IBerry;\r\n}\r\n\r\nexport const getBerries: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryListState, null, IBerryListGetAction>\r\n> = (limit = '', offset = '') => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/?limit=${limit}&offset=${offset}`);\r\n      dispatch({\r\n        berryList: response.data,\r\n        type: GET_BERRYLIST,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getBerryByIdOrName: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryState, null, IBerryGetAction>\r\n> = (idOrName) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/${idOrName}`);\r\n      dispatch({\r\n        resource: response.data,\r\n        type: GET_BERRY,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n"],"sourceRoot":""}