{"version":3,"sources":["services/api/api.ts","components/pages/berries/Berries.tsx","store/actions/BerryActions.ts"],"names":["baseAxios","axios","create","baseURL","api","post","url","data","config","get","useStyles","makeStyles","theme","container","maxHeight","textContainer","backgroundColor","padding","textCard","margin","visuallyHidden","border","clip","height","overflow","position","top","width","berryColumns","id","label","ColumnHead","map","column","TableCell","Berries","berryListWithData","useSelector","state","berryListWithDataState","dispatch","useDispatch","classes","useEffect","limit","offset","a","response","responsePromises","results","berryResult","berryData","Promise","all","berryDataList","berryList","type","GET_BERRYLIST_WITH_DATA","console","log","error","getBerriesWithData","useState","page","setPage","rowsPerPage","setRowsPerPage","perPageOptions","length","listOutFlavors","flavorList","formattedFlavors","forEach","flavor","push","name","join","TableRows","slice","row","index","TableRow","component","scope","firmness","flavors","growth_time","max_harvest","natural_gift_power","natural_gift_type","size","smoothness","soil_dryness","className","Card","CardContent","Typography","TableContainer","Paper","Table","stickyHeader","TableHead","TableBody","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value"],"mappings":"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","file":"static/js/5.8b00ec33.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseAxios = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2',\n});\n\nconst api = (() => {\n  const post = (url: string, data: any, config: any) =>\n    baseAxios.post(url, data, config);\n  const get = (url: string, config?: any) => baseAxios.get(url, config);\n\n  return { post, get };\n})();\n\nexport default api;\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Paper,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport { getBerriesWithData } from '../../../store/actions/BerryActions';\r\nimport { IAppState } from '../../../store/store';\r\n\r\nimport { makeStyles } from '@material-ui/core';\r\nimport './Berries.scss';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    container: {\r\n      maxHeight: 400,\r\n    },\r\n    textContainer: {\r\n      backgroundColor: '#F5F5F5',\r\n      padding: 10,\r\n    },\r\n    textCard: {\r\n      margin: 10,\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n  };\r\n});\r\n\r\ntype Order = 'asc' | 'desc';\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\nfunction getComparator<Key extends keyof any>(\r\n  order: Order,\r\n  orderBy: Key\r\n): (\r\n  a: { [key in Key]: number | string },\r\n  b: { [key in Key]: number | string }\r\n) => number {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n  const stabilized = array.map(\r\n    (element, index) => [element, index] as [T, number]\r\n  );\r\n  stabilized.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilized.map((element) => element[0]);\r\n}\r\n\r\ninterface Column {\r\n  id: keyof IBerry;\r\n  label: string;\r\n  format?: (value: number) => string;\r\n}\r\ninterface Head {\r\n  classes: ReturnType<typeof useStyles>;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof IBerry\r\n  ) => void;\r\n  order: Order;\r\n  orderBy: string;\r\n}\r\nconst berryColumns: Column[] = [\r\n  { id: 'name', label: 'Name' },\r\n  { id: 'firmness', label: 'Firmness' },\r\n  { id: 'flavors', label: 'Flavors' },\r\n  { id: 'growth_time', label: 'Growth Time' },\r\n  { id: 'max_harvest', label: 'Max Harvest' },\r\n  { id: 'natural_gift_power', label: 'Natural Gift Power' },\r\n  { id: 'natural_gift_type', label: 'Natural Gift Type' },\r\n  { id: 'size', label: 'Size' },\r\n  { id: 'smoothness', label: 'Smoothness' },\r\n  { id: 'soil_dryness', label: 'Soil Dryness' },\r\n];\r\nconst ColumnHead = berryColumns.map((column) => {\r\n  return <TableCell key={column.id}>{column.label}</TableCell>;\r\n});\r\nconst EnhancedColumnHead = (props: Head) => {\r\n  const { classes, onRequestSort, order, orderBy } = props;\r\n  const createSortHandler = (property: keyof IBerry) => (\r\n    event: React.MouseEvent<unknown>\r\n  ) => {\r\n    onRequestSort(event, property);\r\n  };\r\n  return (\r\n    <TableRow>\r\n      {berryColumns.map((column) => {\r\n        return (\r\n          <TableCell\r\n            key={column.id}\r\n            sortDirection={orderBy === column.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === column.id}\r\n              direction={orderBy === column.id ? order : 'asc'}\r\n              onClick={createSortHandler(column.id)}\r\n            >\r\n              {column.label}\r\n              {orderBy === column.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        );\r\n      })}\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nconst Berries: React.FunctionComponent<{}> = () => {\r\n  const berryListWithData = useSelector(\r\n    (state: IAppState) => state.berryListWithDataState\r\n  );\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(getBerriesWithData());\r\n  }, [dispatch]);\r\n\r\n  const berryInfoText = `Berries are small, juicy, fleshy fruit. \r\n    As in the real world, a large variety exists in the Pok√©mon world, \r\n    with a large range of flavors, names, and effects. \r\n    First found in the Generation II games, many Berries have since \r\n    become critical held items in battle, where their various effects \r\n    include HP and status condition restoration, stat enhancement, \r\n    and even damage negation.`;\r\n\r\n  const [order, setOrder] = useState<Order>('asc');\r\n  const [orderBy, setOrderBy] = useState<keyof IBerry>('name');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(25);\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  const perPageOptions = berryListWithData.berryList.length\r\n    ? [5, 10, 25, berryListWithData.berryList.length]\r\n    : [5, 10, 25];\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof IBerry\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const listOutFlavors = (flavorList: Array<any> | undefined) => {\r\n    let formattedFlavors: string[] = [];\r\n    if (flavorList && flavorList.length) {\r\n      flavorList.forEach((flavor) => {\r\n        formattedFlavors.push(flavor.flavor.name);\r\n      });\r\n    }\r\n    return formattedFlavors.join(', ');\r\n  };\r\n  const TableRows =\r\n    berryListWithData.berryList.length &&\r\n    berryListWithData.berryList\r\n      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n      .map((row, index) => {\r\n        return (\r\n          <TableRow key={index}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n              {row.name}\r\n            </TableCell>\r\n            <TableCell>{row.firmness?.name}</TableCell>\r\n            <TableCell>{listOutFlavors(row.flavors)}</TableCell>\r\n            <TableCell>{row.growth_time}</TableCell>\r\n            <TableCell>{row.max_harvest}</TableCell>\r\n            <TableCell>{row.natural_gift_power}</TableCell>\r\n            <TableCell>{row.natural_gift_type?.name}</TableCell>\r\n            <TableCell>{row.size}</TableCell>\r\n            <TableCell>{row.smoothness}</TableCell>\r\n            <TableCell>{row.soil_dryness}</TableCell>\r\n          </TableRow>\r\n        );\r\n      });\r\n\r\n  return (\r\n    <div className=\"berry-container\">\r\n      <div className={classes.textContainer}>\r\n        <Card className={classes.textCard}>\r\n          <CardContent>\r\n            <Typography>{berryInfoText}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      <TableContainer component={Paper} className={classes.container}>\r\n        <Table stickyHeader>\r\n          <TableHead>\r\n            <TableRow>{ColumnHead}</TableRow>\r\n            {/* <EnhancedColumnHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            /> */}\r\n          </TableHead>\r\n          <TableBody>{TableRows}</TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={perPageOptions}\r\n        component=\"div\"\r\n        count={\r\n          berryListWithData.berryList ? berryListWithData.berryList.length : 0\r\n        }\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Berries;\r\n","import {\r\n  GET_BERRYLIST,\r\n  GET_BERRYLIST_WITH_DATA,\r\n  GET_BERRY,\r\n} from './actionTypes';\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport {\r\n  IBerryListState,\r\n  IBerryListWithDataState,\r\n  IBerryState,\r\n} from '../reducers/BerryReducers';\r\n\r\nimport api from '../../services/api/api';\r\n\r\nexport interface IBerryListGetAction {\r\n  type: typeof GET_BERRYLIST;\r\n  berryList: IResourceList;\r\n}\r\n\r\nexport interface IBerryListWithDataGetAction {\r\n  type: typeof GET_BERRYLIST_WITH_DATA;\r\n  berryList: IBerry[];\r\n}\r\n\r\nexport interface IBerryGetAction {\r\n  type: typeof GET_BERRY;\r\n  berry: IBerry;\r\n}\r\n\r\nexport const getBerries: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryListState, null, IBerryListGetAction>\r\n> = (limit = '100', offset = '') => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/?limit=${limit}&offset=${offset}`);\r\n      dispatch({\r\n        berryList: response.data,\r\n        type: GET_BERRYLIST,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getBerriesWithData: ActionCreator<\r\n  ThunkAction<\r\n    Promise<any>,\r\n    IBerryListWithDataState,\r\n    null,\r\n    IBerryListWithDataGetAction\r\n  >\r\n> = (limit = '100', offset = '') => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/?limit=${limit}&offset=${offset}`);\r\n      const responsePromises = response.data.results.map(\r\n        async (berryResult: IAPIResource) => {\r\n          let berryData = await api.get(berryResult.url);\r\n          return berryData.data;\r\n        }\r\n      );\r\n      const berryDataList = await Promise.all(responsePromises);\r\n      dispatch({\r\n        berryList: berryDataList,\r\n        type: GET_BERRYLIST_WITH_DATA,\r\n      });\r\n      console.log(berryDataList);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getBerryByIdOrName: ActionCreator<\r\n  ThunkAction<Promise<any>, IBerryState, null, IBerryGetAction>\r\n> = (idOrName) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n      const response = await api.get(`/berry/${idOrName}`);\r\n      dispatch({\r\n        resource: response.data,\r\n        type: GET_BERRY,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n};\r\n"],"sourceRoot":""}